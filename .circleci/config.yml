orbs:
  slack: circleci/slack@4.2.0
version: 2.1
executors:
  app-executor: 
    docker:
      - image: circleci/node:14.16
    working_directory: ~/repo
  slack-executor:
    docker: 
      - image: 'cibuilds/base:latest'
    resource_class: small
  docker-publisher:
    environment:
      IMAGE_NAME: yasiru/cinema
    docker:
      - image: circleci/buildpack-deps:stretch

aliases:
  - &show-current-branch-name
    run:
      name: show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{checksum "package.json"}}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
         - node_modules
      key: app-{{checksum "package.json"}}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: build project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "build successful"

jobs:
  build:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  publish-to-docker:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - *restore-cache
      - run: docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD} docker.io"
      - run: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and push to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM}
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM}
            else
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM}
            fi

  deploy-to-aws-s3:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to aws s3
          ##if we dont have repo/build dont add it into the s3 bucket prod
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_S3_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ] 
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_S3_BUCKET_STAGING} --delete
            else
            aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_S3_BUCKET_DEV} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps: 
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to aws cloud front
          ##if we dont have repo/build dont add it into the s3 bucket prod
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ] 
            then
              aws cloudfront create-invalidation --distribution-id ${STAGGING_DISTRIBUTION} --paths /\*
            else
            aws cloudfront create-invalidation --distribution-id ${DEV_DESTRIBUTION_ID} --paths /\*
            fi

  # test:
  #   executor: app-executor
  #   steps:  
  #     - run: echo "test my app"
  
  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          channel: 'cinema'
          custom: |
            {
              "blocks": [
                 {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloud front is completed üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                    "type": "mrkdwn",
                    "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                    "type": "mrkdwn",
                    "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                    "type": "mrkdwn",
                    "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                    "type": "mrkdwn",
                    "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                    "type": "mrkdwn",
                    "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                 {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: always
    


workflows:
  build_and_deploy: 
    jobs:
      - build
      - linting: 
          requires:   
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier: 
          requires:   
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - publish-to-docker:
          requires:   
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:   
            - publish-to-docker
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:   
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:   
            - deploy-to-aws-cloudfront 
          filters:
            branches:
              only:
                - develop
                - staging
                - master

          



      